package ClientUS.GUI;

import ClientUS.NLP.ThreadNLP;
import ServerUS.StoryBuilder;
import ServerUS.UserInterface;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;

public class SchermataPrincipaleV2 extends javax.swing.JFrame {


    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JEditorPane jEditorPane1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTable jTable1;

    private StoryBuilder userStorySelected;
    private JButton text_story = new JButton();

    private int row_selezionata;

    private UserInterface stub;
    /**
     *
     * Creates new form SchermataSingola
     */
    public SchermataPrincipaleV2(UserInterface stub) throws RemoteException, SQLException {
        this.stub = stub;
        initComponents(this.stub);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(UserInterface stub) throws RemoteException, SQLException {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        jScrollPane2.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        //inserire il comando SQL per richieder tutti i dati.
        //popolare la tabella con i dati del database.

        ArrayList<StoryBuilder> dati_tabella = stub.serachAllUserStoryfromDatabase_Icescrum();

        for (StoryBuilder i: dati_tabella){
           i.print();
        }

        String[] colonne =   new String [] {
                "Project", "User", "Name", "Description", "Date"
        };
        Object[][] matrix_dati = new Object[dati_tabella.size()][5];

        for(int i = 0;i<dati_tabella.size();i++){ // riempe la matrice
                matrix_dati[i][0] = dati_tabella.get(i).getNome_progetto(); // progetto
                matrix_dati[i][1] = dati_tabella.get(i).getAutore();// user
                matrix_dati[i][2] = dati_tabella.get(i).getNome(); // nome
                //matrix_dati[i][3] = dati_tabella.get(i).getDescrizione(); // descrizione
                matrix_dati[i][4] = dati_tabella.get(i).getData_creazione(); // data
                //matrix_dati[i][5] = dati_tabella.poll();; // tag
        }

        DefaultTableModel model = new DefaultTableModel(matrix_dati,colonne);
        jTable1.setModel(model);

        jTable1.getColumn("Description").setCellRenderer(new ButtonRenderer());
        jTable1.getColumn("Description").setCellEditor(new ButtonEditor(new JCheckBox()));
        jTable1.setToolTipText("");

        jTable1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

                row_selezionata= jTable1.getSelectedRow();
            /*  userStorySelected = new StoryBuilder(
                        dati_tabella.get(row_selezionata).getNome(), // nome
                        dati_tabella.get(row_selezionata).getData_creazione(), // descrizione
                        dati_tabella.get(row_selezionata).getAutore(), // autore

                        dati_tabella.get(row_selezionata).getDescrizione(),


                );*/
                userStorySelected = dati_tabella.get(row_selezionata);
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Genera");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        text_story.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                new VisualizzaUserStory(new StoryBuilder(
                        dati_tabella.get(row_selezionata).getNome_progetto(),
                        dati_tabella.get(row_selezionata).getDescrizione(),
                        dati_tabella.get(row_selezionata).getAutore(),
                        dati_tabella.get(row_selezionata).getVersione(),
                        dati_tabella.get(row_selezionata).getData_creazione()
                ));
            }
        });
        //jButton2.setText("View");
        //jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
       /* jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });*/
/*
        jButton3.setText("Find");
        jButton3.setToolTipText("");
        jButton3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });*/

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 112, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                       // .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        //.addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                          //      .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                //.addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );


        setVisible(true);
        pack();
    }// </editor-fold>

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    // bottone genera
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
    //    JOptionPane.showMessageDialog(null,row_selezionata);

        userStorySelected.print();
        ThreadNLP threadNLP = new ThreadNLP(userStorySelected,stub);
        Thread thread = new Thread(threadNLP);
        thread.start();

        // estrae la storia e la
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }
    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt){

    }

//------------------------------------------------------------------
//------------------------------------------------------------------
//------------------------------------------------------------------


    //classe per implementare i bottoni nella tabella
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer(){
            setOpaque(true);
        }
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? ">" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends  DefaultCellEditor{
        private String label;

        public ButtonEditor(JCheckBox checkBox){
            super(checkBox);
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column){
            label = (value == null) ? ">": value.toString();
            text_story.setText(label);
            /**
             * Quando il bottone viene premuto si assegna alla variabile l'indice dell'elemento selezionato
             */
            row_selezionata = row;
            return text_story;
        }
        public Object getCellEditorValue()
        {
            return new String(label);
        }
    }


    // Variables declaration - do not modify

}
