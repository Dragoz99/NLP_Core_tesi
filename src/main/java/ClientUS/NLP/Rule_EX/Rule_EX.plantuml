@startuml

title __RULE_EX's Class Diagram__\n

  namespace ClientUS {
    namespace NLP {
      namespace Rule_EX {
        class ClientUS.NLP.Rule_EX.AC_EX {
            - List_case_SG : List<SemanticGraphEdge>
            - semanticGraph : SemanticGraph
            + AC1()
            + AC2()
            + AC3()
            + AC_EX()
        }
      }
    }
  }
  

  namespace ClientUS {
    namespace NLP {
      namespace Rule_EX {
        class ClientUS.NLP.Rule_EX.A_EX {
            ~ A1_list : List<SemanticGraphEdge>
            ~ A2_list : List<SemanticGraphEdge>
            ~ A3_list : List<SemanticGraphEdge>
            ~ semanticGraph : SemanticGraph
            + A1()
            + A2()
            + A3()
            + A4()
            + A5()
            + A6()
            + A7()
            + A_EX()
        }
      }
    }
  }
  

  namespace ClientUS {
    namespace NLP {
      namespace Rule_EX {
        class ClientUS.NLP.Rule_EX.C_EX {
            - IndexedWord_list_compound : List<IndexedWord>
            - List_case : List<SemanticGraphEdge>
            - List_case_SG : List<SemanticGraphEdge>
            - List_compound : List<SemanticGraphEdge>
            - List_conj : List<SemanticGraphEdge>
            - semanticGraph : SemanticGraph
            + C1()
            + C2()
            + C3()
            + C4()
            + C5()
            + C6()
            + C_EX()
            + find_component_noun()
            + fix_compound_noun_list()
            {static} + removeDuplicates()
        }
      }
    }
  }
  

  namespace ClientUS {
    namespace NLP {
      namespace Rule_EX {
        class ClientUS.NLP.Rule_EX.H_EX {
            ~ semanticGraph : SemanticGraph
            ~ temp_list_acl : List<SemanticGraphEdge>
            ~ temp_list_ccomp : List<SemanticGraphEdge>
            ~ temp_list_nmod : List<SemanticGraphEdge>
            ~ temp_list_nmodOF : List<SemanticGraphEdge>
            ~ temp_list_nsubj : List<SemanticGraphEdge>
            ~ temp_list_obj : List<SemanticGraphEdge>
            ~ temp_list_obl : List<SemanticGraphEdge>
            + H1()
            + H2()
            + H3()
            + H_EX()
        }
      }
    }
  }
  

  namespace ClientUS {
    namespace NLP {
      namespace Rule_EX {
        class ClientUS.NLP.Rule_EX.R_EX {
            ~ List_coref : List<SemanticGraph>
            ~ R2_list : List<SemanticGraphEdge>
            ~ R3_list : List<SemanticGraphEdge>
            ~ Subject : String
            ~ obj : String
            ~ semanticGraph : SemanticGraph
            ~ temp_list : List<SemanticGraphEdge>
            ~ verb : String
            + R1()
            + R1_v2()
            + R2()
            + R3()
            + R4()
            + R_EX()
            {static} + removeDuplicates()
        }
      }
    }
  }
  

  ClientUS.NLP.Rule_EX.AC_EX .up.|> ClientUS.NLP.Interface_rule.AC_RULE
  ClientUS.NLP.Rule_EX.AC_EX o-- ClientUS.NLP.Other.Actor_of_story : Actor_of_story
  ClientUS.NLP.Rule_EX.AC_EX o-- ServerUS.UserInterface : stub
  ClientUS.NLP.Rule_EX.A_EX .up.|> ClientUS.NLP.Interface_rule.A_RULE
  ClientUS.NLP.Rule_EX.A_EX o-- ClientUS.NLP.Liste : liste
  ClientUS.NLP.Rule_EX.C_EX .up.|> ClientUS.NLP.Interface_rule.C_RULE
  ClientUS.NLP.Rule_EX.C_EX o-- ClientUS.NLP.Other.Actor_of_story : actorOfStory
  ClientUS.NLP.Rule_EX.C_EX o-- ClientUS.NLP.Liste : list
  ClientUS.NLP.Rule_EX.H_EX .up.|> ClientUS.NLP.Interface_rule.H_RULE
  ClientUS.NLP.Rule_EX.H_EX o-- ClientUS.NLP.Other.h_rel : h
  ClientUS.NLP.Rule_EX.H_EX o-- ClientUS.NLP.Other.h_rel_new : hRelNew
  ClientUS.NLP.Rule_EX.H_EX o-- ClientUS.NLP.Liste : liste
  ClientUS.NLP.Rule_EX.R_EX .up.|> ClientUS.NLP.Interface_rule.R_RULE
  ClientUS.NLP.Rule_EX.R_EX o-- ClientUS.NLP.Other.Actor_of_story : Actor_of_story
  ClientUS.NLP.Rule_EX.R_EX o-- ClientUS.NLP.Liste : liste
  ClientUS.NLP.Rule_EX.R_EX o-- ClientUS.NLP.Other.r_rel_new : rRelNew


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
